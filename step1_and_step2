import logging
import os
import pandas as pd
import matplotlib.pyplot as plt

def setup_logging(log_file_path):
    logger = logging.getLogger('VehicleAnalysisLogger')
    logger.setLevel(logging.DEBUG)

    if logger.hasHandlers():
        logger.handlers.clear()

    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.DEBUG)
    console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(console_formatter)

    file_handler = logging.FileHandler(log_file_path, mode='a')
    file_handler.setLevel(logging.DEBUG)
    file_formatter = logging.Formatter('%(message)s')
    file_handler.setFormatter(file_formatter)

    logger.addHandler(console_handler)
    logger.addHandler(file_handler)

    return logger

def read_tracks_csv(file_path):
    data = pd.read_csv(file_path)
    tracks_by_frame_and_id = {}
    for frame, frame_data in data.groupby('frame'):
        tracks_by_frame_and_id[frame] = {}
        for _, row in frame_data.iterrows():
            tracks_by_frame_and_id[frame][row['id']] = row.to_dict()
    return tracks_by_frame_and_id



def identify_vehicles(tracks_by_frame_and_id):
    for frame, vehicles in tracks_by_frame_and_id.items():
        for vehicle_id, vehicle_data in vehicles.items():
            # 检查该车辆是否有有效的thw值
            if 'thw' in vehicle_data and vehicle_data['thw'] is not None:
                # 本车已确定，尝试获取其precedingId作为切入车的ID
                if 'precedingId' in vehicle_data and vehicle_data['precedingId'] is not None:
                    cut_in_vehicle_id = vehicle_data['precedingId']
                    # 检查切入车ID是否有效且存在于当前帧中
                    if cut_in_vehicle_id in vehicles:
                        # 检查切入车的 laneId 是否发生变化
                        if has_lane_id_changed(cut_in_vehicle_id, tracks_by_frame_and_id):
                            print(f"Ego Vehicle ID: {vehicle_id}, Cutting-in Vehicle ID: {cut_in_vehicle_id}")
                            return cut_in_vehicle_id, vehicle_id  # 本车ID, 切入车ID
                        else:
                            print(f"Cutting-in vehicle {cut_in_vehicle_id} did not change lanes. Continuing search.")

    print("No valid vehicle pairs found.")
    return None, None

def has_lane_id_changed(vehicle_id, tracks_by_frame_and_id):
    last_lane_id = None
    for frame, vehicles in sorted(tracks_by_frame_and_id.items()):
        if vehicle_id in vehicles:
            current_lane_id = vehicles[vehicle_id].get('laneId')
            if last_lane_id is not None and current_lane_id != last_lane_id:
                return True
            last_lane_id = current_lane_id
    return False



def analyze_vehicle_relationship(tracks_data):
    results = []
    min_value = float('inf')  # Initialize min_value as infinity to find the minimum positive value

    vehicle_ids = identify_vehicles(tracks_data)  # Assuming identify_vehicles returns a tuple of vehicle IDs

    if None not in vehicle_ids:  # Check if vehicle IDs were properly identified
        for frame in sorted(tracks_data.keys()):  # Sort the frames and iterate
            if all(vehicle_id in tracks_data[frame] for vehicle_id in vehicle_ids):  # Check if all vehicle IDs are in the current frame
                car1 = tracks_data[frame][vehicle_ids[0]]  # Access data for the first vehicle
                car2 = tracks_data[frame][vehicle_ids[1]]  # Access data for the second vehicle

                if car2['xVelocity'] != 0:  # Ensure the xVelocity is not zero to avoid division by zero
                    value = (car1['x'] + ((car1['width'] - car2['width']) / 2) - car2['x']) / car2['xVelocity']  # Calculate the value

                    if value > 0:  # Only consider positive values
                        results.append(value)  # Store the value in the results list
                        if value < min_value:  # Check if this value is the smallest found so far
                            min_value = value  # Update min_value to this new smallest value

        # After processing all frames, decide pass or fail based on the smallest positive value
        if min_value < 2 and min_value != float('inf'):  # Ensure min_value was updated at least once from infinity
            return "Fail", results, min_value
        else:
            return "Pass", results, min_value  # If no positive values found, it defaults to Pass as min_value remains inf

    return "Fail", results, None  # Return Fail if no valid vehicle IDs were identified or if no values were computed


def check_collision(tracks_data):
    x_diffs = []
    min_diff = float('inf')
    vehicle_ids = identify_vehicles(tracks_data)

    if None not in vehicle_ids:
        for frame in sorted(tracks_data.keys()):
            if all(vehicle_id in tracks_data[frame] for vehicle_id in vehicle_ids):
                car1 = tracks_data[frame][vehicle_ids[0]]
                car2 = tracks_data[frame][vehicle_ids[1]]
                x_diff = abs(car1['x'] - car2['x'])
                x_diffs.append(x_diff)
                min_diff = min(min_diff, x_diff)
                if x_diff < ((car1['width'] + car2['width']) / 2):
                    return "Fail", x_diffs, min_diff
    return "Pass", x_diffs, min_diff if min_diff != float('inf') else None

def process_folders(root_dir, logger):
    fail_files = []
    # 现在假设所有的 CSV 文件都直接在 root_dir 下
    for file in os.listdir(root_dir):
        if file.endswith("tracks.csv"):
            file_path = os.path.join(root_dir, file)
            logger.info(f"Processing file: {file_path}")
            tracks_data = read_tracks_csv(file_path)
            rel_result, rel_data, min_thw = analyze_vehicle_relationship(tracks_data)
            if rel_result == "Fail":
                logger.info(f"{file} - Vehicle relationship check failed. Checking for collisions.{min_thw}")
                coll_result, coll_data, min_x_diff = check_collision(tracks_data)
                if coll_result == "Fail":
                    fail_files.append(file_path)
                    logger.info(f"{file} - Collision detected.{min_x_diff}")
                else:
                    logger.info(f"{file} - No collision detected. Minimum x difference is: {min_x_diff}")
            else:
                logger.info(f"{file} - Vehicle relationship check passed. Minimum THW: {min_thw}")

    if fail_files:
        logger.info("Files that failed checks:")
        for f in fail_files:
            logger.info(f)

if __name__ == "__main__":
    root_dir = "/home/dji/disk1/zhouhang/shuju/"
    log_file_path = "/home/dji/disk1/zhouhang/shuju/chuli.txt"
    logger = setup_logging(log_file_path)
    process_folders(root_dir, logger)
